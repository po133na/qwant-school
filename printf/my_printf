#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

int leng(char* str) {
    int cnt = 0;
    for (int i = 0; str[i]; i++) {
        cnt++;
    }
    return cnt;
}

char* string(char* str) {
    char* str1 = malloc(sizeof(char) *leng(str));
    int ix = 0;
    for (int i = leng(str) - 1; i != -1; i--) {
        str1[i] = str[ix];
        ix++; 
    } 
    return str1;
}

int prch(char* c) {
    write(1, c, leng(c));
    int length_of_str = leng(c);
    return length_of_str;
}
int print_decimal(int decimal) {
    int flag = 0;
    int l = 0;
    int num = decimal;
    char* str = malloc(sizeof(char)*10);
    if (num == 0) {
        str[0] = num + '0';
        write(1, &str[0], 1);
        return l += 1;
    }
    else if (num < 0) {
        flag = 1;
        num = num * -1;
    }
    if (num > 0) {
        for (int i = 0; num != 0 ; i++) {
            str[i] = num % 10 + '0';
            num = num / 10;
        }
    }  
    if (flag == 1) {
        str[leng(str)] = '-';
    }  
    char* rvsr = string(str);

    l = prch(rvsr);
    return l;
}

int hex(long x) {
    char* hexa = malloc(sizeof(char) *20);
    int i = 0, temp;
    while (x != 0) {
        temp = x % 16;
        if (temp < 10) {
            hexa[i] = temp + 48;
            i++;
        }
        else {
            hexa[i] = temp + 87;
            i++;
        }
        x /= 16;
    }
    char* str = string(hexa);
    write(1, str, leng(str));
    return leng(str);
}
int decihex(int x) {
    char* hdec = malloc(sizeof(char) *20);
    int i = 0, temp;
    while (x != 0) {
        temp = x % 16;
        if (temp < 10) {
            hdec[i] = temp + 48;
            i++;
        }
        else {
            hdec[i] = temp + 55;
            i++;
        }
        x = x / 16;
    }
    char* str = string(hdec);
    write(1, str, leng(str));
    return leng(str);
}

int oct(int octal){
    int octalnum = 0,  count = 0, temp = 1;
    while (octal != 0)
    {
        count++;
    	octalnum = octalnum + (octal % 8) * temp;
    	octal = octal / 8;
        temp = temp * 10;
    }
    char* str = malloc(sizeof(char) *count) ;
    for(int in = 0; octalnum != 0; in++){
        str[in] = (octalnum % 10) + '0';
        octalnum = octalnum / 10;
    }
    char* reversed = string(str);
    int length = prch(reversed);
    return length;
}
int intpr(int intp) {
    char* str = malloc(sizeof(char)* 10);
    if (intp < 0) {
        intp = intp * -1;
    }
     if (intp > 0) {
        for (int i = 0; intp != 0 ; i++) {
            str[i] = intp % 10 + '0';
            intp /= 10;
        }
    }  
    char* rev = string(str);
    return prch(rev);
}
int my_printf(char* format, ...) {
    int contlen = 0;
    va_list list_of_var;
    va_start(list_of_var, format);
    for (int i = 0; format[i]; i++) {
        if (format[i] == '%' && format[i + 1] == 's') {
            char* str = va_arg(list_of_var, char*);
            if(str == NULL){
                str = "(null)";
            }
            contlen += prch(str);
            i++;
        }
        else if (format[i] == '%' && format[i + 1] == 'c') {
            char c = va_arg(list_of_var, int);
            write(1, &c, 1);
            i++;
            contlen++;
        }
        else if (format[i] == '%' && format[i + 1] == 'd') {
            int dec = va_arg(list_of_var, int);
            contlen += print_decimal(dec);
            i++;
        }
        else if (format[i] == '%' && format[i + 1] == 'x') {
            int hdex = va_arg(list_of_var, int);
            contlen += decihex(hdex);
            i++;
        }
        else if (format[i] == '%' && format[i + 1] == 'o') {
            int octal = va_arg(list_of_var, int);
            contlen += oct(octal); 
            i++;
        }
        else if (format[i] == '%' && format[i + 1] == 'u') {
            int un_int = va_arg(list_of_var, int);
            contlen += intpr(un_int);
            i++;
        }
        else if (format[i] == '%' && format[i + 1] == 'p') {
            unsigned long v = (unsigned long)va_arg(list_of_var, void*);
            write(1, "0x", 2);
            contlen += 2;
            contlen += hex(v);
            i++;
        }
        else {
            write(1, &format[i], 1);
            contlen++;
        }
    }
    return contlen;
}
